SELECT datname AS "Database Name",
       pg_get_userbyid(datdba) AS "Owner",
       pg_encoding_to_char(encoding) AS "Encoding",
       datcollate AS "Collate",
       datctype AS "Ctype",
       datistemplate AS "Is Template",
       datallowconn AS "Allow Connections"
FROM pg_database
WHERE datname NOT IN ('template0', 'template1')
ORDER BY "Database Name";


SELECT n.nspname as schema_name,
       t.typname as type_name,
       CASE
           WHEN t.typtype = 'e' THEN 'enum'
           WHEN t.typtype = 'c' THEN 'composite'
           WHEN t.typtype = 'r' THEN 'range'
           ELSE 'other'
       END as type_category
FROM pg_type t
JOIN pg_namespace n ON n.oid = t.typnamespace
WHERE n.nspname NOT IN ('pg_catalog', 'information_schema')
AND t.typrelid = 0  -- Exclude table row types
AND NOT EXISTS (
    SELECT 1
    FROM pg_catalog.pg_type el
    WHERE el.oid = t.typelem AND el.typarray = t.oid
);



RUN apt-get install -y postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6
RUN pg_createcluster 9.6 main
RUN echo "listen_addresses = '*'" >> /etc/postgresql/9.6/main/postgresql.conf
RUN echo "host  all  all 0.0.0.0/0 md5">>/etc/postgresql/9.6/main/pg_hba.conf


   usermod -aG sudo pompom \
    su pompom

    USER postgres
    RUN pg_ctl -D /usr/local/pgsql/data initdb
    RUN chown postgres /usr/local/pgsql/data
    RUN /usr/lib/postgresql/16/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
RUN postgres -D /usr/local/pgsql/data



RUN  pg_ctl -D /usr/local/pgsql/data initdb


RUN sudo adduser pompom --disabled-password
RUN echo "pompom:pompom" | sudo chpasswd



RUN mkdir -p /usr/local/pgsql/data
RUN chown postgres /usr/local/pgsql/data
USER postgres


RUN  pg_ctl -D /usr/local/pgsql/data initdb
RUN echo "host  all  all 0.0.0.0/0 md5">> /usr/local/pgsql/data/pg_hba.conf
--------------------------------
CREATE TYPE my_composite_type AS (
    id INTEGER,
    description TEXT
);
--------------------------------
CREATE TABLE all_data_types (
    serial_col SERIAL PRIMARY KEY,        -- 自動インクリメントの整数
    int_col INTEGER,                      -- 整数
    smallint_col SMALLINT,                -- 小さい整数
    bigint_col BIGINT,                    -- 大きい整数
    decimal_col DECIMAL(10, 2),           -- 固定小数点数
    numeric_col NUMERIC(10, 2),           -- 固定小数点数
    real_col REAL,                        -- 単精度浮動小数点数
    double_col DOUBLE PRECISION,          -- 倍精度浮動小数点数
    money_col MONEY,                      -- 通貨型
    char_col CHAR(10),                    -- 固定長文字列
    varchar_col VARCHAR(255),             -- 可変長文字列
    text_col TEXT,                        -- テキスト
    bytea_col BYTEA,                      -- バイナリデータ
    date_col DATE,                        -- 日付
    time_col TIME,                        -- 時間
    timetz_col TIME WITH TIME ZONE,       -- タイムゾーン付き時間
    timestamp_col TIMESTAMP,              -- タイムスタンプ
    timestamptz_col TIMESTAMP WITH TIME ZONE, -- タイムゾーン付きタイムスタンプ
    interval_col INTERVAL,                -- 時間間隔
    boolean_col BOOLEAN,                  -- ブール値
    point_col POINT,                      -- 幾何座標
    line_col LINE,                        -- 幾何線
    lseg_col LSEG,                        -- 線分
    box_col BOX,                          -- 矩形
    path_col PATH,                        -- パス（点の集合）
    polygon_col POLYGON,                  -- 多角形
    circle_col CIRCLE,                    -- 円
    cidr_col CIDR,                        -- IPアドレス/ネットワーク
    inet_col INET,                        -- IPアドレス
    macaddr_col MACADDR,                  -- MACアドレス
    uuid_col UUID,                        -- UUID
    json_col JSON,                        -- JSONデータ
    jsonb_col JSONB,                      -- JSONデータ（二進形式）
    xml_col XML,                          -- XMLデータ
    array_col INTEGER[],                  -- 配列
    composite_col my_composite_type       -- 複合型
);
--------------------------------------------
INSERT INTO all_data_types (
    int_col, smallint_col, bigint_col, decimal_col, numeric_col,
    real_col, double_col, money_col, char_col, varchar_col, text_col, bytea_col,
    date_col, time_col, timetz_col, timestamp_col, timestamptz_col, interval_col,
    boolean_col, point_col, line_col, lseg_col, box_col, path_col, polygon_col, circle_col,
    cidr_col, inet_col, macaddr_col, uuid_col, json_col, jsonb_col, xml_col, array_col, composite_col
) VALUES (
    1,                   -- int_col
    2,                   -- smallint_col
    1234567890123456789, -- bigint_col
    1234.56,             -- decimal_col
    1234.56,             -- numeric_col
    1.23,                -- real_col
    1.23456789,          -- double_col
    '$1234.56',          -- money_col
    'char10',            -- char_col
    'varchar255',        -- varchar_col
    'Some text',         -- text_col
    '\xDEADBEEF',        -- bytea_col (hex format)
    '2024-07-15',        -- date_col
    '12:34:56',          -- time_col
    '12:34:56+00',       -- timetz_col
    '2024-07-15 12:34:56',             -- timestamp_col
    '2024-07-15 12:34:56+00',          -- timestamptz_col
    '1 year 2 months 3 days',          -- interval_col
    TRUE,                              -- boolean_col
    '(1,2)',                           -- point_col
    '[(0,0),(1,1)]',                   -- line_col
    '[(0,0),(1,1)]',                   -- lseg_col
    '((0,0),(1,1))',                   -- box_col
    '[(0,0),(1,1)]',                   -- path_col
    '((0,0),(1,1),(0,1))',             -- polygon_col
    '<(1,1),1>',                       -- circle_col
    '192.168.1.0/24',                  -- cidr_col
    '192.168.1.1',                     -- inet_col
    '08:00:2b:01:02:03',               -- macaddr_col
    '123e4567-e89b-12d3-a456-426614174000', -- uuid_col
    '{"key": "value"}',                -- json_col
    '{"key": "value"}',                -- jsonb_col
    '<foo>bar</foo>',                  -- xml_col
    '{1,2,3}',                         -- array_col
    ROW(1, 'example')                  -- composite_col
);



data
id dataRelatedSomethingId

dataRelatedSomething
dataRelatedSomethingid somethingId

something
somethingId somethingValue


means ….

SELECT *
FROM data
LEFT JOIN dataRelatedSomething ON data.dataRelatedSomethingId = dataRelatedSomething.dataRelatedSomethingId
LEFT JOIN something ON dataRelatedSomething.somethingId = something.somethingId;

to be ...
-- dataテーブルの作成
CREATE TABLE data (
    id INT PRIMARY KEY,
    dataRelatedSomethingId TEXT
);

-- dataRelatedSomethingテーブルの作成
CREATE TABLE dataRelatedSomething (
    dataRelatedSomethingId TEXT PRIMARY KEY,
    somethingId TEXT
);

-- somethingテーブルの作成
CREATE TABLE something (
    somethingId TEXT PRIMARY KEY,
    somethingValue VARCHAR(255)
);

for using ...
INSERT INTO data (id, dataRelatedSomethingId) VALUES (1, '100A');
INSERT INTO data (id, dataRelatedSomethingId) VALUES (2, '101B');


INSERT INTO dataRelatedSomething (dataRelatedSomethingId, somethingId) VALUES ('100A', '200X');
INSERT INTO dataRelatedSomething (dataRelatedSomethingId, somethingId) VALUES ('101B', '201Y');


INSERT INTO something (somethingId, somethingValue) VALUES ('200X', 'Value 1');
INSERT INTO something (somethingId, somethingValue) VALUES ('201Y', 'Value 2');

——no used———
select * from data
left join dataRelatedSomething on dataRelatedSomethingId
left join something on somethingId

